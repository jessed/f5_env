# /shared/bin/env.ltm

# use vi-mode cli
set -o vi

# add /shared/bis to the PATH
PATH=/shared/bin:$PATH

# Define some environment vars
export TERM=screen
export EDITOR=vi
export CTRL='172.27.253.65'


# Aliases should be in here.
alias ll='ls -l --color=always'
alias lh='ls -lh --color=always'
alias la='ls -lA --color=always'
alias duh='du -h --max-depth=1'
alias vi=vim
alias last='last -20'
alias resource="source /shared/bin/env.ltm"

## F5-specific aliases
alias slot1='ssh slot1'
alias slot2='ssh slot2'
alias slot3='ssh slot3'
alias slot4='ssh slot4'
alias t=tmsh
alias conf=tmsh
alias quit=exit
alias ssc='tmsh save sys config'
alias bt-vips='bigtop -n -vname -delay 1 -nodes 0 -conn -delta'
alias bt-nums='bigtop -n -delay 1 -nodes 0 -conn -delta'
alias bt-pkts='bigtop -n -delay 1 -nodes 0 -pkts -delta'
alias bt-nodes='bigtop -n -delay 1 -vips 0 -conn -delta'
alias listprofiles='tmsh list ltm profile | grep profile'
alias shownodes="tmsh list ltm node | awk /^ltm/'{print $3}'"
alias listvips="tmsh list ltm virtual | awk /^ltm/'{print $3}'"
alias showtmm='tmsh show sys tmm-info raw | grep -E "Sys|Memory|Avail|Used|--"'
alias watchtmm='watch "tmsh show sys tmm-info raw | grep -E \"Sys|Memory|Avail|Used|--\""'
alias showintstats="tmsh reset-stats net interface; watch -n 1 'tmsh show net interface'"
alias showsoftware="tmsh show sys software | awk '/BIGIP/ { print $4 }'"
alias getver='head -5 /VERSION'
alias tmctl='tmctl -w 100'
alias tmstat='tmstat summary'
alias huptmm='tmsh restart sys service tmm'
alias getTmmConns="tmsh show sys traffic raw | awk '/Current Conn/ {print \$1,\$2,\$3}'"
alias getmem="tmsh sh sys tmm-info global"
alias failover="tmsh run sys failover standby"
alias offline="tmsh run sys failover offline"
alias online="tmsh run sys failover online"
alias watchAPMSessions='watch -n2 "sessiondump -list | wc -l"'
alias mytail="tail -f /var/log/ltm | grep -v Tcpdump"


## Functions
# push a config-sync to the device-group
sync() {
  if [ -n "$1" ]; then
    tmsh run cm config-sync to-group $1
  else
    syncgroup=$(tmsh list cm device-group one-line | awk /sync-failover/'{print $3}')
    echo "Syncing local config to $syncgroup"
    tmsh run cm config-sync to-group $syncgroup
  fi
}

listAPMSessions() {
  sessiondump -list | wc -l
}

killAPMSessions() {
  SESSIONS=$(sessiondump -list | awk '{ print $1 }')
  totalSess=$(echo $SESSIONS | wc -w)
  for i in $SESSIONS; do
    echo Sessions remaining: $totalSess
    sessiondump -delete $i
    ((totalSess--))
  done
}

# relicense the system, either with the specified regkey (if provided) or with the
# previous key (from bigip.license).
#alias rl="SOAPLicenseClient --basekey $(awk /Registration/' { print $4 }' /config/bigip.license)"
relicense() {
  if [ -z "$1" ]; then
    echo "Running: SOAPLicenseClient --verbose --basekey $(awk '/Reg/ {print $4}' /config/bigip.license)"
    SOAPLicenseClient --verbose --basekey $(awk '/Reg/ {print $4}' /config/bigip.license)
  else
    SOAPLicenseClient --verbose --basekey $1
  fi
}

# Force mcpd to load from config files on one or all blades
forceload() {
  if [ -n "$1" ]; then
    echo "Performing forceload on slot $1 only"
    ssh $1 touch /service/mcpd/forceload
    ssh $1 tmsh restart sys service all
  else
    echo "Performing forceload on all active slots"
    clsh touch /service/mcpd/forceload
    clsh tmsh restart sys service all
  fi
}

get_memory() {
  totalMem=$(tmsh sh sys tmm-info global raw | awk '/Available/ {print $2}')
  usedMem=$(tmsh sh sys tmm-info global raw | awk '/Used/ {print $2}')
  pctUsed=$(calc "($usedMem / $totalMem)*100")

  printf "Used %'d out of %'d available (${pctUsed}%)\n" $usedMem $totalMem $pctUsed
}

wipenodes() {
  NODES=$(tmsh list ltm node | awk /ltm\ node/'{print $3}')
  for n in $NODES; do
    tmsh delete ltm node $n 2>/dev/null && echo "Deleting node '$n'"
  done
}


clearstats() {
  if [[ -n "$1" ]]; then
    b $1 all stats reset
  else
    tmsh reset-stats net interface 
    tmsh reset-stats ltm virtual
    tmsh reset-stats ltm pool
    tmsh reset-stats ltm node
    tmsh reset-stats ltm rule
    tmsh reset-stats sys performance all-stats
    tmsh reset-stats sys traffic
    tmsh reset-stats sys tmm
  fi
}

syncslots() {
  if [[ -z "$1" ]]; then
    echo "Please specify the slot to be sync'd"
    echo "USAGE: syncslots slot<ID> (EX: syncslots slot3)"
    return
  else
    SLOT=$1
  fi
  test -f /root/.env.ltm || {
    echo "/root/.env.ltm does not exist. Exiting..."
    return
  }

  scp /root/.env.ltm ${SLOT}:
  ssh $SLOT "sed -i -e \"s/^cd \/config/#cd \/config/\" .bash_profile"
  ssh $SLOT "echo \"alias src='. /root/.env.ltm'\">> .bash_profile"
  ssh $SLOT "touch .hushlogin"
  ssh $SLOT "sed -i -e \"s/^clear/#clear/\" .bash_logout"
}


# aliases to remove... get rid of rm|cp|mv interactivity
cmds="mv cp rm ps"
for i in $cmds; do
  alias | grep -q $i && unalias $i 2> /dev/null
done


### define the custom prompt
PROMPT_DIRTRIM=4
BLINK="\[\e[5m\]"
CLR="\[\e[0m\]"
GREEN="\[\e[0;32m\]"
RED="\[\e[0;31m\]"
BLUE="\[\e[0;34m\]"
CYAN="\[\e[0;36m\]"
PURPLE="\[\e[0;35m\]"
BROWN="\[\e[0;33m\]"
LTBLUE="\[\e[1;34m\]"
LTGREEN="\[\e[1;32m\]"
LTRED="\[\e[1;31m\]"
LTCYAN="\[\e[1;36m\]"
YELLOW="\[\e[1;33m\]"
WHITE="\[\e[1;37m\]"


export PLATFORM=$(awk 'BEGIN{FS = "="}; /platform/ {print $2}' /PLATFORM)
active="Active"
standby="Standby"
v10="10.*"
v11="11.*"


#custom prompt
mk_prompt () { 
  # populate status environment vars
  read mcpPhase      < /var/prompt/mcpPhase
  read mcpLoadStatus < /var/prompt/mcpLoadStatus
  read promptStatus  < /var/prompt/ps1

  # legacy variables
  read fstatus < /var/prompt/ps1
  read bstatus < /var/prompt/ps1

    # sometimes, at least in v9-10.x, the chassis put things in different locations...
    case $PLATFORM in
      "A100")
        export VIPRION=1
        ;;
      "A107")
        export VIPRION=1
        ;;
      "A108")
        export VIPRION=1
        ;;
      "A109")
        export VIPRION=1
        ;;
      "A110")
        export VIPRION=1
        ;;
      "A111")
        export VIPRION=1
        ;;
      "A112")
        export VIPRION=1
        ;;
      *)
        export VIPRION=0
        ;;
    esac


    if [[ $VIPRION -gt 0 ]]; then
      #echo "VIPRION detected"
      if [ -f /SLOT ]; then read SLOT < /SLOT; else SLOT=0; fi
      if [ -f /var/prompt/cmiSyncStatus ]; then read SYNC < /var/prompt/cmiSyncStatus; else SYNC="Unknown"; fi

      fullstatus="\/(S[1234])-?([[:alpha:]]*)?-([PS]):(Active|Standby|Offline|INOPERATIVE)"
      statusColor=""
      if [[  "$promptStatus" =~ $fullstatus ]]; then
        STATUS=${BASH_REMATCH[2]}
        PRIORITY=${BASH_REMATCH[3]}
        STATE=${BASH_REMATCH[4]}

        if [ "$PRIORITY" == "P" ]; then
          pri="Pri"
        elif [ "$PRIORITY" == "S" ]; then
          pri="Sec"
        else
          pri="unknown"
        fi

        if [ "$STATE" == "Active" -o "$STATE" == "Standby" ]; then
            if [ "$SYNC" != "In Sync" ]; then
              PS1="${LTCYAN}Slot: ${SLOT}, ${STATE}, ${SYNC}${CLR}\n\h:\w >"
            else
              #PS1="${GREEN}\h($SLOT):\w ($pri-$STATE)>${CLR}"
              #PS1="${GREEN}\h:${SLOT}($pri-$STATE):\w >${CLR}"
              PS1="${GREEN}Slot: ${SLOT}, ${STATE}, ${SYNC}${CLR}\n\h:\w >"
            fi
        else
          #PS1="${RED}\h($SLOT):\w ($pri-$STATE)>${CLR}"
          PS1="${RED}Slot: ${SLOT}, ($STATE), ${SYNC}${CLR}\n\h:\w >"
        fi
      fi
    else # not a viprion
      #echo "Appliance detected"
      fullstatus="\/(S[1234])-([PS]):(Active|Standby)"
      if [[ "$bstatus" =~ "$active" || "$bstatus" =~ "$standby" ]]; then
        PS1="${GREEN}$bstatus${CLR}\n\h:\w >";
      else
        PS1="${RED}($bstatus)${CLR}\n\h:\w >";
      fi
      if [[ "$VERSION" =~ "$v10" ]]; then
        if [ "$bstatus" != "$fstatus" ]; then
          echo "Status reported by '/bin/ps1' does not match '/var/prompt/ps1'"
        fi
      fi
    fi
}
      
export PROMPT_COMMAND=mk_prompt

# create some tmsh aliases
mk_tmsh_aliases() {
  VERSION=$(awk '/Version/ { print $2 }' /VERSION)
  if [[ "$VERSION" =~ "$v11" ]]; then
    #v11.x
    tmsh modify cli preference editor vi tcl-syntax-highlighting enabled
    tmsh modify cli preference prompt { host status current-folder multi-line } 2>/dev/null
    tmsh create cli alias shared exit command "quit" 2>/dev/null
    tmsh create cli alias shared ssc command "save sys config" 2>/dev/null
    tmsh create cli alias shared ping command "run util ping" 2>/dev/null
    tmsh create cli alias shared ping6 command "run util ping6" 2>/dev/null
    tmsh create cli alias shared tcpdump command "run util tcpdump" 2>/dev/null
    tmsh create cli alias shared clear command "run util bash -c clear" 2>/dev/null
    tmsh create cli alias shared huptmm command "run util bash -c 'clsh tmsh restart sys service tmm'"
    tmsh create cli alias shared showtcp command "show sys connection protocol tcp type mirror"
    tmsh create cli alias shared failover command "run sys failover standby"
    tmsh create cli alias shared offline command "run sys failover offline"
    tmsh create cli alias shared online command "run sys failover online"
    tmsh create cli alias shared sync command "run cm config-sync to-group fo_group"
    tmsh modify sys db ui.system.preferences.startscreen value virtual_servers
    tmsh modify sys db ui.system.preferences.recordsperscreen value 100
    tmsh modify sys db ui.system.preferences.advancedselection value advanced
  else
    #v10.2.x
    tmsh modify cli preference editor vi
    tmsh modify cli preference prompt { host status multi-line }
    tmsh create cli alias ping command "run util ping" 2>/dev/null
    tmsh create cli alias ping6 command "run util ping6" 2>/dev/null
    tmsh create cli alias tcpdump command "run util tcpdump" 2>/dev/null
    tmsh create cli alias clear command "run util bash -c clear" 2>/dev/null
    tmsh create cli alias exit command "quit" 2>/dev/null
    tmsh create cli alias huptmm command "run util bash -c clsh tmsh restart sys service tmm" 2>/dev/null
    tmsh create cli alias ssc command "save sys config" 2>/dev/null
    tmsh create cli alias showtcp command "show sys connection protocol tcp"
    tmsh modify cli global-settings service number
  fi
}

# create the basic, default config for an ITC LTM
mk_default() {
  echo -n "Please enter the hostname (domain will be: pl.itc.f5net.com): "
  read name
  echo "Using ${name}.pl.itc.f5net.com"
  tmsh modify sys global-settings hostname ${name}.pl.itc.f5net.com
  tmsh modify sys global-settings gui-setup disabled
  tmsh modify sys dns name-servers add { 172.22.48.10 172.27.1.1 }
  tmsh modify sys dns search add { pl.itc.f5net.com }
  tmsh modify sys ntp servers add { 172.22.48.10 }
  tmsh modify sys snmp allowed-addresses add { ALL }
  #tmsh modify sys syslog remote-servers add { tcsrv01 { host 172.22.57.206 }}
  tmsh modify sys httpd auth-pam-idle-timeout 86400
  tmsh modify sys db bigpipe.displayservicenames value false
}

## Commands to review:
#     getConfigSyncStatus getMcpLoadStatus getMcpPhase getPromptStatus


# vim: syntax=sh ts=2 st=2
