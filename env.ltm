# $HOME/Dropbox/dev/ltm_helpers

#####################################################
# Creates several command aliases, generates custom bash & tmsh prompts,
# and defines several bash functions. 
#
# Copyright, F5 Networks, 2009-2015
# Written by: Jesse Driskill, ITC Systems Engineer
#####################################################


# use vi-mode cli
set -o vi

# enable DEBUG mode
export DEBUG=0

# Define some environment vars
export EDITOR=vi


# Aliases should be in here.
alias ll='ls -l --color=always'
alias lh='ls -lh --color=always'
alias la='ls -lA --color=always'
alias duh='du -h --max-depth=1'
alias vi=vim
alias last='last -20'
alias resource="source /shared/bin/env.ltm"

## F5-specific aliases
alias t=tmsh
alias conf=tmsh
alias quit=exit
alias slot1='ssh slot1'
alias slot2='ssh slot2'
alias slot3='ssh slot3'
alias slot4='ssh slot4'
alias slot5='ssh slot5'
alias slot6='ssh slot6'
alias slot7='ssh slot7'
alias slot8='ssh slot8'
alias ssc='tmsh save sys config'
alias bt-vips='bigtop -n -vname -delay 1 -nodes 0 -conn -delta'
alias bt-nums='bigtop -n -delay 1 -nodes 0 -conn -delta'
alias bt-vname='bigtop -n -vname -delay 1 -nodes 0 -conn'
alias bt-pkts='bigtop -n -delay 1 -nodes 0 -pkts -delta'
alias bt-nodes='bigtop -n -delay 1 -vips 0 -conn -delta'
alias listprofiles='tmsh list ltm profile | grep profile'
alias shownodes="tmsh list ltm node | awk /^ltm/'{print $3}'"
alias listvips="tmsh list ltm virtual | awk /^ltm/'{print $3}'"
alias showmem='tmsh show sys tmm-info raw | grep -E "Sys|Memory|Avail|Used|--"'
alias watchmem='watch "tmsh show sys tmm-info raw | grep -E \"Sys|Memory|Avail|Used|--\""'
alias getmem="tmsh sh sys tmm-info global"
alias showintstats="tmsh reset-stats net interface; watch -n 1 'tmsh show net interface'"
alias showsoftware="tmsh show sys software | awk '/BIGIP/ { print $4 }'"
alias getver='head -5 /VERSION'
alias tmctl='tmctl -w 100'
alias tmstat='tmstat summary'
alias huptmm='tmsh restart sys service tmm'
alias getTmmConns="tmsh show sys traffic raw | awk '/Current Conn/ {print \$1,\$2,\$3}'"
alias failover="tmsh run sys failover standby"
alias offline="tmsh run sys failover offline"
alias online="tmsh run sys failover online"
alias clearpersist="tmsh delete ltm persistence persist-records"
alias showconns='tmsh show sys tmm-traffic global | grep Current'
alias showtmmconns='tmsh show sys tmm-traffic | grep -E "Sys|Current"'
alias clearconns='tmsh delete sys conn all'

alias watchApmSessions='watch -n5 "sessiondump -list | wc -l"'
alias listApmSessions='sessiondump -list | wc -l'


## General LTM Functions
# push a config-sync to the device-group
sync() {
  if [ -n "$1" ]; then
    syncgroup=$1
  else
    syncgroup=$(tmsh list cm device-group one-line | awk /sync-failover/'{print $3}')
  fi
  echo "Syncing local config to $syncgroup"
  tmsh run cm config-sync to-group $syncgroup
}

# relicense the system
# either with the specified regkey (if provided) or with the previous key (from bigip.license).
relicense() {
  if [ -n "$1" ]; then
    key=$1
  else
    key=$(awk '/Reg/ { print $4 }' /config/bigip.license)
  fi
  echo "Running: SOAPLicenseClient --verbose --basekey $key"
  SOAPLicenseClient --verbose --basekey $key 
}

# Force mcpd to load from config files on one or all blades
forceload() {
  if [ -n "$1" ]; then
    echo "Performing forceload on slot $1 only"
    ssh $1 touch /service/mcpd/forceload
    ssh $1 tmsh restart sys service all
  else
    echo "Performing forceload on all active slots"
    clsh touch /service/mcpd/forceload
    clsh tmsh restart sys service all
  fi
}

get_memory() {
  totalMem=$(tmsh sh sys tmm-info global raw | awk '/Available/ {print $2}')
  usedMem=$(tmsh sh sys tmm-info global raw | awk '/Used/ {print $2}')
  pctUsed=$(calc "($usedMem / $totalMem)*100")

  printf "Used %'d out of %'d available (${pctUsed}%)\n" $usedMem $totalMem $pctUsed
}

wipenodes() {
  NODES=$(tmsh list ltm node | awk /ltm\ node/'{print $3}')
  for n in $NODES; do
    tmsh delete ltm node $n 2>/dev/null && echo "Deleting node '$n'"
  done
}


clearstats() {
  if [[ -n "$1" ]]; then
    b $1 all stats reset
  else
    tmsh reset-stats net interface 
    tmsh reset-stats ltm virtual
    tmsh reset-stats ltm pool
    tmsh reset-stats ltm node
    tmsh reset-stats ltm rule
    tmsh reset-stats sys performance all-stats
    tmsh reset-stats sys traffic
    tmsh reset-stats sys tmm
  fi
}

showpersist() {
  nodes=$*
  if [[ -z "$nodes" ]]; then
    echo "USAGE: showpersist nodeaddr1 [nodeaddr2 ...]"
    return
  fi

  while (true); do
    tmsh show ltm persistence persist-records >/tmp/persist_records.txt
    for n in $nodes; do
      echo "$n: $(grep -c $n /tmp/persist_records.txt)"
    done
    rm /tmp/persist_records.txt
    sleep 5
  done
}

syncslots() {
  if [[ -n "$1" ]]; then
    SLOT=$1
  else
    echo "USAGE: syncslots slot<ID> (EX: syncslots slot3)"
    return
  fi

  test -f /shared/env.ltm || {
    echo "/root/.env.ltm does not exist. Exiting..."
    return
  }

  scp /shared/env.ltm ${SLOT}:/shared/env.ltm
  scp /shared/vimrc.ltm ${SLOT}:/shared/vimrc.ltm
  ssh $SLOT "ln -sf /shared/env.ltm .env.ltm"
  ssh $SLOT "ln -sf /shared/vimrc.ltm .vimrc"

  ssh $SLOT "sed -i -e \"s/^cd \/config/#cd \/config/\" .bash_profile"
  ssh $SLOT "echo \"alias src='. /shared/env.ltm'\">> .bash_profile"
  ssh $SLOT "echo \"source /shared/env.ltm\">> .bash_profile"
  ssh $SLOT "touch .hushlogin"
  ssh $SLOT "sed -i -e \"s/^clear/#clear/\" .bash_logout"
}

# Disable a cluster member (blade)
disable() {
  if [[ -z "$1" ]]; then
    echo "USAGE: disable <slot#>"
    return
  else
    echo tmsh modify sys cluster default members { $1 { disabled }}
    tmsh modify sys cluster default members { $1 { disabled }}
  fi
}

# Enable a cluster member (blade)
enable() {
  if [[ -z "$1" ]]; then
    echo "USAGE: enable <slot#>"
    return
  else
    echo tmsh modify sys cluster default members { $1 { enabled }}
    tmsh modify sys cluster default members { $1 { enabled }}
  fi
}

# aliases to remove... get rid of rm|cp|mv interactivity
cmds="mv cp rm ps"
for i in $cmds; do
  alias | grep -q $i && unalias $i 2> /dev/null
done

##
## PEM functions
##
del_subs() {
list=$(pem_sessiondump -l | awk /1:/'{ print $2 }')

for sub in $list; do
  tmsh modify pem sessiondb session-ip $sub session-state marked-for-deletion
done
}


##
## APM functions
##
killApmSessionsall() {
  SESSIONS=$(sessiondump -list | awk '{ print $1 }')
  sessCount=$(echo $SESSIONS | wc -w)
  for i in $SESSIONS; do
    sessiondump -delete $i
    ((sessCount--))
    echo Sessions remaining: $sessCount
  done
}

killApmSessionstop() {
  grab=$(expr $(sessiondump -list | wc -l) / 2)
  sess=$(sessiondump -list | awk '{print $1}' | sort | head -${grab});
  for s in $sess; do sessiondump -delete $s; done
}

killApmSessionsbot() {
  grab=$(expr $(sessiondump -list | wc -l) / 2)
  sess=$(sessiondump -list | awk '{print $1}' | sort | tail -${grab});
  for s in $sess; do sessiondump -delete $s; done
}

getvlans() {
  vlans=$(tmsh list net vlan | awk '/vlan/{print $3}')
  for v in $vlans; do
    tmsh show net vlan $v | head -8
  done
}



### define the custom prompt
PROMPT_DIRTRIM=4
TITLE="\[\e]0;\h\a"
BLINK="\[\e[5m\]"
CLR="\[\e[0m\]"
GREEN="\[\e[0;32m\]"
RED="\[\e[0;31m\]"
BLUE="\[\e[0;34m\]"
CYAN="\[\e[0;36m\]"
PURPLE="\[\e[0;35m\]"
BROWN="\[\e[0;33m\]"
LTBLUE="\[\e[1;34m\]"
LTGREEN="\[\e[1;32m\]"
LTRED="\[\e[1;31m\]"
LTCYAN="\[\e[1;36m\]"
YELLOW="\[\e[1;33m\]"
WHITE="\[\e[1;37m\]"


export PLATFORM=$(awk 'BEGIN{FS = "="}; /platform/ {print $2}' /PLATFORM)
v10="10.*"
v11="11.*"
v4="4.*"    # BIG-IQ

#custom prompt
mk_prompt () { 
  # sometimes, at least in v9-10.x, the chassis put things in different locations...
  case $PLATFORM in
    "A100")
      export VIPRION=1
      ;;
    "A107")
      export VIPRION=1
      ;;
    "A108")
      export VIPRION=1
      ;;
    "A109")
      export VIPRION=1
      ;;
    "A110")
      export VIPRION=1
      ;;
    "A111")
      export VIPRION=1
      ;;
    "A112")
      export VIPRION=1
      ;;
    "A113")
      export  VIPRION=1
      ;;
    "Z101")
      export  VIPRION=1
      ;;
    *)
      export VIPRION=0
      ;;
  esac

  # Get failover state
  read pStatus  < /var/prompt/ps1
  # Get sync status
  if [ -f /var/prompt/cmiSyncStatus ]; then read SYNC < /var/prompt/cmiSyncStatus; else SYNC="Unknown"; fi

  goodFO="(Active|Standby|Standalone|Offline|INOPERATIVE)"
  single="(Standalone)"
  syncStatus="(In Sync)"
  if [[ "$SYNC" =~ $single ]]; then STANDALONE=${BASH_REMATCH[0]}; fi

  if [[ $VIPRION -gt 0 ]]; then # viprion platform
    if [ -f /SLOT ]; then read SLOT < /SLOT; else SLOT=0; fi

    fullStatus="\/(S[12345678])-([[:alpha:]]*)?-([PS]):(Active|Standby|Standalone|Offline|INOPERATIVE)"
    if [[ "$pStatus" =~ $fullStatus ]]; then
      SLOT=${BASH_REMATCH[1]}
      STATUS=${BASH_REMATCH[2]}
      haState=${BASH_REMATCH[3]}
      FO=${BASH_REMATCH[4]}

      if   [ "$haState" == "P" ]; then pri="Pri"
      elif [ "$haState" == "S" ]; then pri="Sec"
      else pri="unknown"
      fi

      #if [[ "$STATE" =~ "Active" || "$STATE" =~ "Standby" ]]; then
      if [[ "$FO" =~ $goodFO ]]; then
          if [[ "$SYNC" != $syncStatus && "$SYNC" != "Standalone" ]]; then
            PS1="${TITLE}${LTCYAN}Slot: ${SLOT}, ${FO}, ${SYNC}${CLR}\n\h:\w >"
          else
            PS1="${TITLE}${GREEN}Slot: ${SLOT}, ${FO}, ${SYNC}${CLR}\n\h:\w >"
          fi
      else  # System is not in Active or Standby FO state
        PS1="${RED}Slot: ${SLOT}, ($FO), ${SYNC}${CLR}\n\h:\w >"
      fi
    fi
  else  # Appliance, not viprion
    if [[ "$pStatus" =~ $goodFO ]]; then FO=${BASH_REMATCH[1]}; fi

    if [[ -z "$STANDALONE" ]]; then # Redundant
      (($DEBUG)) && echo "Redundant Appliance"
      if [[ "$FO" =~ $goodFO ]]; then
        if [[ "$SYNC" =~ $syncStatus ]]; then 
          PS1="${TITLE}${GREEN}${FO}, ${SYNC}${CLR}\n\h:\w >"
        else
          (($DEBUG)) && echo "Code 1"
          PS1="${TITLE}${LTCYAN}${pStatus}, ${SYNC}${CLR}\n\h:\w >"
        fi
      else # Unknown Failover state ($FO)
        (($DEBUG)) && echo "Code 2"
        PS1=${TITLE}"${YELLOW}Slot ${FO}, ${SYNC} (Unknown failover state: ${FO})${CLR}\n\h:\w >"
      fi
    else # Standalone
      (($DEBUG)) && echo "Standalone Appliance"
      if [[ "$pStatus" =~ $goodFO ]]; then
        FO=${BASH_REMATCH[1]}
        (($DEBUG)) && echo "$FO, $pStatus"

        if [[ "$FO" =~ $goodFO ]]; then
          (($DEBUG)) && echo "Code 3"
          PS1=${TITLE}"${GREEN}${FO}, ${SYNC}${CLR}\n\h:\w >"
        fi
      else # System is not in Active or Standby
        (($DEBUG)) && echo "Code 4"
        echo "SLOT: $SLOT, haState: $haState, FO: $FO, STANDALONE: $STANDALONE"
        PS1=${TITLE}"${RED}($pStatus), ${SYNC}${CLR}\n\h:\w >";
      fi
    fi  
  fi
}
      
export PROMPT_COMMAND=mk_prompt

# create some tmsh aliases
mk_tmsh_aliases() {
  VERSION=$(awk '/Version/ { print $2 }' /VERSION)
  if [[ "$VERSION" =~ "$v11" || "$VERSION" =~ "$v4" ]]; then
    #v11.x
    echo "Creating aliases for v11.x (BIG-IQ v4.x)"
    tmsh modify cli preference history-date-time enabled 2>/dev/null
    tmsh modify cli preference keymay vi 2>/dev/null
    tmsh modify cli preference editor vi tcl-syntax-highlighting enabled
    tmsh modify cli preference prompt { host status current-folder multi-line } 2>/dev/null
    tmsh create cli alias shared exit command "quit" 2>/dev/null
    tmsh create cli alias shared ssc command "save sys config" 2>/dev/null
    tmsh create cli alias shared ping command "run util ping" 2>/dev/null
    tmsh create cli alias shared ping6 command "run util ping6" 2>/dev/null
    tmsh create cli alias shared tcpdump command "run util tcpdump" 2>/dev/null
    tmsh create cli alias shared clear command "run util bash -c clear" 2>/dev/null
    tmsh create cli alias shared huptmm command "run util bash -c 'clsh tmsh restart sys service tmm'"
    tmsh create cli alias shared showtcp command "show sys connection protocol tcp type mirror"
    tmsh create cli alias shared failover command "run sys failover standby"
    tmsh create cli alias shared offline command "run sys failover offline"
    tmsh create cli alias shared online command "run sys failover online"
    tmsh create cli alias shared sync command "run cm config-sync to-group fo_group"
    tmsh modify sys db ui.system.preferences.startscreen value virtual_servers
    tmsh modify sys db ui.system.preferences.recordsperscreen value 100
    tmsh modify sys db ui.system.preferences.advancedselection value advanced
  else
    #v10.2.x
    echo "Creating aliases for v10.x"
    tmsh modify cli preference editor vi
    tmsh modify cli preference prompt { host status multi-line }
    tmsh create cli alias ping command "run util ping" 2>/dev/null
    tmsh create cli alias ping6 command "run util ping6" 2>/dev/null
    tmsh create cli alias tcpdump command "run util tcpdump" 2>/dev/null
    tmsh create cli alias clear command "run util bash -c clear" 2>/dev/null
    tmsh create cli alias exit command "quit" 2>/dev/null
    tmsh create cli alias huptmm command "run util bash -c clsh tmsh restart sys service tmm" 2>/dev/null
    tmsh create cli alias ssc command "save sys config" 2>/dev/null
    tmsh create cli alias showtcp command "show sys connection protocol tcp"
    tmsh modify cli global-settings service number
  fi
}

# create the basic, default config for an ITC LTM
mk_default() {
  echo -n "Please enter the hostname (domain will be: pl.itc.f5net.com): "
  read name
  echo "Using ${name}.pl.itc.f5net.com"
  tmsh modify sys global-settings hostname ${name}.pl.itc.f5net.com
  tmsh modify sys global-settings gui-setup disabled
  tmsh modify sys dns name-servers add { 172.22.48.10 172.27.1.1 }
  tmsh modify sys dns search add { pl.itc.f5net.com }
  tmsh modify sys ntp servers add { 172.22.48.10 }
  tmsh modify sys snmp allowed-addresses add { ALL }
  tmsh modify sys httpd auth-pam-idle-timeout 86400
  tmsh modify sys db bigpipe.displayservicenames value false
  tmsh modify sys management-route default gateway 172.22.57.254
  #tmsh modify sys syslog remote-servers add { tcsrv01 { host 172.22.57.206 }}
}

## Commands to review:
#     getConfigSyncStatus getMcpLoadStatus getMcpPhase getPromptStatus


# ex: set syntax=sh tabstop=2 expandtab: 
